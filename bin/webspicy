#!/usr/bin/env ruby
#/
#/ Document & test web services as black-box operations.
#/ (c) Enspirit SRL. Distributed under MIT licence.
#/
#/ Usage: webspicy URL
#/ Usage: webspicy [options] path/to/config.rb
#/
#/ Options:
#/ -h, --help       Show this help message
#/ -v, --version    Show webspicy version
#/
#/ Recognized env vars:
#/ - ROBUST=no|only               execute no counterexamples (or only them)
#/ - LOG_LEVEL=INFO|DEBUG|...     set log level to the appropriate level
#/ - RESOURCE=...                 restrict to .yml test files matching the pattern
#/ - METHOD=GET|POST|DELETE...    execute only tests matching the HTTP verb
#/ - TAG=...                      execute only tests matching the given tag
#/ - FAILFAST=yes|no              stop executing tests on first failure
#/
require 'webspicy'
require 'webspicy/tester'
require 'optparse'

def showhelp
  file = __FILE__
  exec "grep ^#/<'#{file}'|cut -c4-"
end

ARGV.options do |opts|
  opts.on_tail("-h", "--help"){
    showhelp
  }
  opts.on("-v", "--version"){
    puts "webspicy v#{Webspicy::VERSION}, (c) Enspirit SRL"
    exit(0)
  }
  opts.parse!
end

if ARGV.size != 1
  showhelp
  exit(-1)
end

case p = ARGV.first
when %r{http(s)?:\/\/}
  require 'tmpdir'
  require 'path'
  d = Path("/tmp/webspicy")
  d.mkdir_p
  (Path(d)/"config.rb").write('Webspicy::Configuration.new(Path.dir)') 
  (Path(d)/"spec.yml").write(<<~YML)
  ---
  name: |-
    Default specification
  
  url: |-
    #{p}
  
  services:
  - method: |-
      GET
  
    description: |-
      .
  
    input_schema: |-
      .
  
    output_schema: |-
      .
  
    error_schema: |-
      .
  
    examples:
  
      - description: |-
          it returns a 200
        params: {}
        expected:
          content_type: text/html
          status: 200
  YML
  config = Webspicy::Configuration.dress(d)
  res = Webspicy::Tester.new(config).call
  abort("Some tests failed") unless res == 0
when ->(f){ Path(f).exists? }
  config = Webspicy::Configuration.dress(p)
  res = Webspicy::Tester.new(config).call
  abort("Some tests failed") unless res == 0
else
  puts "No such file or directory `#{p}`"
  exit(-1)
end
